// Global variables
let map;
let myLocation = null;
let userMarker = null; // Used for the local Blue/Red marker (always visible to self)
let showMyLocation = false; // Initial state is false
let isHelping = false; // Tracks if the current user needs help

let otherUsersMarkers = {}; Â  Â  Â  Â  Â  // { username: { marker, helping, showLocation } }
let activeHelpNotifications = {}; Â  Â // { needyUsername: { message, color, responded } } 
let activeLines = {}; Â  Â  Â  Â  Â  Â  Â  Â  // { needyUsername: [polylines] }

// ðŸŸ¢ FIX: Global variable to manage the polling interval ID for synchronization
let alertIntervalId; 

// Utility: Calculate distance between two lat/lng points in km
function getDistance(lat1, lng1, lat2, lng2) {
Â  Â  const toRad = v => v * Math.PI / 180;
Â  Â  const R = 6371;
Â  Â  const dLat = toRad(lat2 - lat1);
Â  Â  const dLng = toRad(lng2 - lng1);
Â  Â  const a = Math.sin(dLat/2)**2 + Math.cos(toRad(lat1))*Math.cos(toRad(lat2))*Math.sin(dLng/2)**2;
Â  Â  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
Â  Â  return R * c;
}

// Module 1: Initialize map and user location
function initMap() {
Â  Â  map = L.map("map").setView([20.5937, 78.9629], 5);

Â  Â  L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
Â  Â  Â  Â  attribution: '&copy; <a href="https://openstreetmap.org/copyright">OpenStreetMap</a>',
Â  Â  Â  Â  maxZoom: 19,
Â  Â  }).addTo(map);

Â  Â  if (navigator.geolocation) {
Â  Â  Â  Â  navigator.geolocation.getCurrentPosition(
Â  Â  Â  Â  Â  Â  (pos) => {
Â  Â  Â  Â  Â  Â  Â  Â  myLocation = { lat: pos.coords.latitude, lng: pos.coords.longitude };
Â  Â  Â  Â  Â  Â  Â  Â  updateUserMarker();
Â  Â  Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  Â  Â  // Tell the server to disable sharing immediately (important for initial state)
Â  Â  Â  Â  Â  Â  Â  Â  removeSharedLocation(); 
Â  Â  Â  Â  Â  Â  },
Â  Â  Â  Â  Â  Â  (err) => {
Â  Â  Â  Â  Â  Â  Â  Â  console.error("Geolocation error:", err);
Â  Â  Â  Â  Â  Â  Â  Â  alert("Geolocation permission denied or unavailable.");
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  );
Â  Â  } else {
Â  Â  Â  Â  alert("Geolocation not supported.");
Â  Â  }

Â  Â  document.getElementById("helpMeBtn").style.backgroundColor = "#f39c12";
Â  Â  document.getElementById("showLocationBtn").style.backgroundColor = "#16a085";

Â  Â  // ðŸŸ¢ Start the primary polling loop and store its ID
Â  Â  alertIntervalId = setInterval(fetchAlerts, 3000); 
}

// Update user marker (blue or red pulsating) - This is the default 'self' marker
function updateUserMarker() {
Â  Â  if (!myLocation) return;
Â  Â  if (userMarker) map.removeLayer(userMarker);

Â  Â  let icon;
Â  Â  if (isHelping) {
Â  Â  Â  Â  icon = L.divIcon({ className: 'help-marker' });
Â  Â  } else {
Â  Â  Â  Â  icon = L.icon({
Â  Â  Â  Â  Â  Â  iconUrl: "https://unpkg.com/leaflet/dist/images/marker-icon.png",
Â  Â  Â  Â  Â  Â  iconRetinaUrl: "https://unpkg.com/leaflet/dist/images/marker-icon-2x.png",
Â  Â  Â  Â  Â  Â  shadowUrl: "https://unpkg.com/leaflet/dist/images/marker-shadow.png",
Â  Â  Â  Â  Â  Â  iconSize: [25, 41],
Â  Â  Â  Â  Â  Â  iconAnchor: [12, 41],
Â  Â  Â  Â  Â  Â  popupAnchor: [1, -34],
Â  Â  Â  Â  Â  Â  shadowSize: [41, 41]
Â  Â  Â  Â  });
Â  Â  }

Â  Â  userMarker = L.marker([myLocation.lat, myLocation.lng], { icon, title: username }).addTo(map);
Â  Â  userMarker.bindPopup(isHelping ? "You need help!" : "You");
Â  Â  map.setView([myLocation.lat, myLocation.lng], 12);
}

// Module 2: Send / remove shared location
function sendLocationUpdate() {
Â  Â  if (!myLocation) return;
Â  Â  // Sends the current state of showMyLocation (true/false)
Â  Â  fetch("/update_location", {
Â  Â  Â  Â  method: "POST",
Â  Â  Â  Â  headers: { "Content-Type": "application/json" },
Â  Â  Â  Â  body: JSON.stringify({ username, lat: myLocation.lat, lng: myLocation.lng, showLocation: showMyLocation }),
Â  Â  });
}

// Function to tell the server to stop broadcasting location
function removeSharedLocation() {
Â  Â  // Sends a request to clear the server's record for this user's shared location
Â  Â  fetch("/remove_location", { 
Â  Â  Â  Â  method: "POST",
Â  Â  Â  Â  headers: { "Content-Type": "application/json" },
Â  Â  Â  Â  body: JSON.stringify({ username })
Â  Â  })
Â  Â  .catch(console.error);
}

function addOrUpdateUserMarker(uName, lat, lng, helping, showLocation) {
Â  Â  // ðŸŸ¢ FIX: Exclude the local user from displaying their own green marker.
Â  Â  if (uName === username) return;

Â  Â  if (otherUsersMarkers[uName]) map.removeLayer(otherUsersMarkers[uName].marker);

Â  Â  let icon;
Â  Â  if (helping) {
Â  Â  Â  Â  icon = L.divIcon({ className: 'help-marker' });
Â  Â  } else if (showLocation) {
Â  Â  Â  Â  // Green dot marker (static)
Â  Â  Â  Â  icon = L.divIcon({ 
Â  Â  Â  Â  Â  Â  className: 'green-dot-marker',
Â  Â  Â  Â  Â  Â  iconSize: [16, 16],
Â  Â  Â  Â  Â  Â  iconAnchor: [8, 8]
Â  Â  Â  Â  });
Â  Â  } else {
Â  Â  Â  Â  // DISAPPEARANCE LOGIC: If showLocation is false, remove the marker
Â  Â  Â  Â  if (otherUsersMarkers[uName]) {
Â  Â  Â  Â  Â  Â  map.removeLayer(otherUsersMarkers[uName].marker);
Â  Â  Â  Â  Â  Â  delete otherUsersMarkers[uName];
Â  Â  Â  Â  }
Â  Â  Â  Â  return;
Â  Â  }

Â  Â  let marker = L.marker([lat, lng], { icon }).addTo(map);
Â  Â  marker.bindPopup(helping ? `${uName} needs help!` : uName);

Â  Â  otherUsersMarkers[uName] = { marker, helping, showLocation };
}

// Persistent notifications
function addOrUpdatePersistentNotification(id, message, color) {
Â  Â  let item = document.getElementById(id);
Â  Â  const notificationsDiv = document.getElementById("notifications");
Â  Â  if (!item) {
Â  Â  Â  Â  item = document.createElement("div");
Â  Â  Â  Â  item.className = `popup-item ${color}`;
Â  Â  Â  Â  item.id = id;
Â  Â  Â  Â  item.innerHTML = `<strong>${message}</strong>`;
Â  Â  Â  Â  notificationsDiv.appendChild(item);
Â  Â  } else {
Â  Â  Â  Â  item.querySelector("strong").textContent = message;
Â  Â  }
}

function removePersistentNotification(id) {
Â  Â  const item = document.getElementById(id);
Â  Â  if(item) item.remove();
}

// Module 3: Help Me toggle
document.getElementById("helpMeBtn").addEventListener("click", () => {
Â  Â  if (!myLocation) return alert("Location not available.");

Â  Â  isHelping = !isHelping;
Â  Â  document.getElementById("helpMeBtn").style.backgroundColor = isHelping ? "#e74c3c" : "#f39c12";

Â  Â  updateUserMarker();
Â  Â  sendHelpAlert(isHelping);

Â  Â  if (isHelping) {
Â  Â  Â  Â  const nearbyUsers = Object.keys(otherUsersMarkers).filter(u => {
Â  Â  Â  Â  Â  Â  if (!myLocation) return false;
Â  Â  Â  Â  Â  Â  const dist = getDistance(myLocation.lat, myLocation.lng,
Â  Â  Â  Â  Â  Â  Â  Â  otherUsersMarkers[u].marker.getLatLng().lat,
Â  Â  Â  Â  Â  Â  Â  Â  otherUsersMarkers[u].marker.getLatLng().lng);
Â  Â  Â  Â  Â  Â  return dist <= 1;
Â  Â  Â  Â  });

Â  Â  Â  Â  addOrUpdatePersistentNotification("helpNotif",
Â  Â  Â  Â  Â  Â  `You need help! Location shared to ${nearbyUsers.length} users within 1 km.`, "red");
Â  Â  } else {
Â  Â  Â  Â  removePersistentNotification("helpNotif");
Â  Â  Â  Â  fetch("/notify_safe", {
Â  Â  Â  Â  Â  Â  method: "POST",
Â  Â  Â  Â  Â  Â  headers: { "Content-Type": "application/json" },
Â  Â  Â  Â  Â  Â  body: JSON.stringify({ username })
Â  Â  Â  Â  });
Â  Â  Â  Â  document.getElementById("notifications").querySelectorAll('[id^="needy-helper-"]').forEach(item => item.remove());
Â  Â  }
});

function sendHelpAlert(helping) {
Â  Â  fetch("/send_alert", {
Â  Â  Â  Â  method: "POST",
Â  Â  Â  Â  headers: { "Content-Type": "application/json" },
Â  Â  Â  Â  body: JSON.stringify({ username, lat: myLocation.lat, lng: myLocation.lng, helping }),
Â  Â  });
}

// Module 4: Fetch alerts, update map and notifications
function fetchAlerts() {
Â  Â  fetch("/get_alerts")
Â  Â  Â  Â  .then(res => res.json())
Â  Â  Â  Â  .then(alerts => {
Â  Â  Â  Â  Â  Â  Object.keys(activeHelpNotifications).forEach(key => {
Â  Â  Â  Â  Â  Â  Â  Â  if (!alerts.some(a => a.username === key && a.helping)) {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  removeNotification(key);
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  if(activeLines[key]) {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  activeLines[key].forEach(line => map.removeLayer(line));
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  delete activeLines[key];
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  });

Â  Â  Â  Â  Â  Â  const myAlert = alerts.find(a => a.username === username);

Â  Â  Â  Â  Â  Â  if (isHelping && myAlert && myAlert.activeHelpers) {
Â  Â  Â  Â  Â  Â  Â  Â  const helperUsernames = myAlert.activeHelpers.map(h => h.helper);
Â  Â  Â  Â  Â  Â  Â  Â  document.getElementById("notifications").querySelectorAll('[id^="needy-helper-"]').forEach(item => {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  const helperNameFromId = item.id.replace('needy-helper-', '');
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  if (!helperUsernames.includes(helperNameFromId)) item.remove();
Â  Â  Â  Â  Â  Â  Â  Â  });
Â  Â  Â  Â  Â  Â  Â  Â  myAlert.activeHelpers.forEach(helperData => {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  const message = `Helper ${helperData.helper} is coming. Distance: ${helperData.distance} km`;
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  addOrUpdateNeedyNotification(helperData.helper, message);
Â  Â  Â  Â  Â  Â  Â  Â  });
Â  Â  Â  Â  Â  Â  } else if (isHelping && !myAlert?.activeHelpers) {
Â  Â  Â  Â  Â  Â  Â  Â  document.getElementById("notifications").querySelectorAll('[id^="needy-helper-"]').forEach(item => item.remove());
Â  Â  Â  Â  Â  Â  }

Â  Â  Â  Â  Â  Â  alerts.forEach(alert => {
Â  Â  Â  Â  Â  Â  Â  Â  const { username: uName, lat, lng, helping, showLocation } = alert;
Â  Â  Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  Â  Â  addOrUpdateUserMarker(uName, lat, lng, helping, showLocation);

Â  Â  Â  Â  Â  Â  Â  Â  if (helping && uName !== username) { // Notifications are still only for other users
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  const distance = myLocation ? getDistance(myLocation.lat, myLocation.lng, lat, lng).toFixed(2) : 0;
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  if (!activeHelpNotifications[uName]) {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  activeHelpNotifications[uName] = {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  message: `${uName} needs help! Distance: ${distance} km`,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  color: "red",
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  responded: false
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  };
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  addHelpNotification(uName, activeHelpNotifications[uName]);
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  if (!activeHelpNotifications[uName].responded) {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  activeHelpNotifications[uName].message = `${uName} needs help! Distance: ${distance} km`;
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  activeHelpNotifications[uName].message = `You are helping ${uName}. Distance: ${distance} km`;
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  updateHelpNotification(uName);
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  });
Â  Â  Â  Â  })
Â  Â  Â  Â  .catch(err => console.error("Error fetching alerts:", err));
}

function addHelpNotification(uName, notif) {
Â  Â  const notificationsDiv = document.getElementById("notifications");
Â  Â  if (document.getElementById(`notif-${uName}`)) return;

Â  Â  const item = document.createElement("div");
Â  Â  item.className = `popup-item ${notif.color}`;
Â  Â  item.id = `notif-${uName}`;
Â  Â  item.innerHTML = `<strong>${notif.message}</strong>`;

Â  Â  const helpBtn = document.createElement("button");
Â  Â  helpBtn.textContent = "Help";
Â  Â  helpBtn.style.marginTop = "5px";
Â  Â  helpBtn.addEventListener("click", () => respondToHelp(uName));
Â  Â  item.appendChild(helpBtn);

Â  Â  notificationsDiv.appendChild(item);
}

function updateHelpNotification(uName) {
Â  Â  const item = document.getElementById(`notif-${uName}`);
Â  Â  if(item) {
Â  Â  Â  Â  item.querySelector("strong").textContent = activeHelpNotifications[uName].message;
Â  Â  Â  Â  item.classList.remove("red", "blue");
Â  Â  Â  Â  item.classList.add(activeHelpNotifications[uName].color);
Â  Â  }
}

function removeNotification(uName) {
Â  Â  const item = document.getElementById(`notif-${uName}`);
Â  Â  if(item) item.remove();
Â  Â  delete activeHelpNotifications[uName];
}

function respondToHelp(needyUsername) {
Â  Â  if (!otherUsersMarkers[needyUsername]) return;

Â  Â  const needyLatLng = otherUsersMarkers[needyUsername].marker.getLatLng();
Â  Â  const distance = myLocation ? getDistance(myLocation.lat, myLocation.lng, needyLatLng.lat, needyLatLng.lng).toFixed(2) : 0;

Â  Â  fetch("/send_response", {
Â  Â  Â  Â  method: "POST",
Â  Â  Â  Â  headers: { "Content-Type": "application/json" },
Â  Â  Â  Â  body: JSON.stringify({ helper: username, needy: needyUsername, lat: myLocation.lat, lng: myLocation.lng })
Â  Â  }).then(res => res.json())
Â  Â  Â  .then(data => console.log("Helper response recorded:", data));

Â  Â  if (activeLines[needyUsername]) {
Â  Â  Â  Â  activeLines[needyUsername].forEach(line => map.removeLayer(line));
Â  Â  Â  Â  activeLines[needyUsername] = [];
Â  Â  } else {
Â  Â  Â  Â  activeLines[needyUsername] = [];
Â  Â  }

Â  Â  const line = L.polyline([[myLocation.lat, myLocation.lng], [needyLatLng.lat, needyLatLng.lng]], {
Â  Â  Â  Â  color: 'blue',
Â  Â  Â  Â  dashArray: '5,10'
Â  Â  }).addTo(map);
Â  Â  activeLines[needyUsername].push(line);

Â  Â  const helperNotifItem = document.getElementById(`notif-${needyUsername}`);
Â  Â  if (helperNotifItem) {
Â  Â  Â  Â  if (activeHelpNotifications[needyUsername]) {
Â  Â  Â  Â  Â  Â  activeHelpNotifications[needyUsername].responded = true;
Â  Â  Â  Â  Â  Â  activeHelpNotifications[needyUsername].color = "blue";
Â  Â  Â  Â  Â  Â  activeHelpNotifications[needyUsername].message = `You are helping ${needyUsername}. Distance: ${distance} km`;
Â  Â  Â  Â  }

Â  Â  Â  Â  helperNotifItem.querySelector("strong").textContent = activeHelpNotifications[needyUsername].message;
Â  Â  Â  Â  helperNotifItem.classList.remove("red");
Â  Â  Â  Â  helperNotifItem.classList.add("blue");
Â  Â  Â  Â  
Â  Â  Â  Â  const btn = helperNotifItem.querySelector("button");
Â  Â  Â  Â  if (btn) btn.remove();
Â  Â  }

Â  Â  sendHelperNotificationToNeedy(needyUsername, username, distance);
}

function updateHelperDistances() {
Â  Â  Object.keys(activeLines).forEach(needyUsername => {
Â  Â  Â  Â  const helperNotifItem = document.getElementById(`notif-${needyUsername}`);
Â  Â  Â  Â  if (helperNotifItem) {
Â  Â  Â  Â  Â  Â  const helperLatLng = myLocation;
Â  Â  Â  Â  Â  Â  const needyLatLng = otherUsersMarkers[needyUsername]?.marker.getLatLng();
Â  Â  Â  Â  Â  Â  if (!needyLatLng || !helperLatLng) return;
Â  Â  Â  Â  Â  Â  const distance = getDistance(helperLatLng.lat, helperLatLng.lng, needyLatLng.lat, needyLatLng.lng).toFixed(2);
Â  Â  Â  Â  Â  Â  if (activeHelpNotifications[needyUsername]?.responded) {
Â  Â  Â  Â  Â  Â  Â  Â  activeHelpNotifications[needyUsername].message = `You are helping ${needyUsername}. Distance: ${distance} km`;
Â  Â  Â  Â  Â  Â  Â  Â  helperNotifItem.querySelector("strong").textContent = activeHelpNotifications[needyUsername].message;
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  sendHelperNotificationToNeedy(needyUsername, username, distance);
Â  Â  Â  Â  }
Â  Â  });
}

function sendHelperNotificationToNeedy(needyUsername, helperName, distance) {
Â  Â  fetch("/notify_needy", {
Â  Â  Â  Â  method: "POST",
Â  Â  Â  Â  headers: { "Content-Type": "application/json" },
Â  Â  Â  Â  body: JSON.stringify({ needy: needyUsername, helper: helperName, distance })
Â  Â  });
}

function addOrUpdateNeedyNotification(helperName, message) {
Â  Â  let id = `needy-helper-${helperName}`;
Â  Â  let item = document.getElementById(id);
Â  Â  const notificationsDiv = document.getElementById("notifications");
Â  Â  if(!item) {
Â  Â  Â  Â  item = document.createElement("div");
Â  Â  Â  Â  item.className = "popup-item blue";
Â  Â  Â  Â  item.id = id;
Â  Â  Â  Â  item.innerHTML = `<strong>${message}</strong>`;
Â  Â  Â  Â  notificationsDiv.appendChild(item);
Â  Â  } else {
Â  Â  Â  Â  item.querySelector("strong").textContent = message;
Â  Â  }
}

document.getElementById("showLocationBtn").addEventListener("click", () => {
Â  Â  if (!myLocation) return alert("Location not available.");
Â  Â  
Â  Â  // Toggle the state
Â  Â  showMyLocation = !showMyLocation;
Â  Â  
Â  Â  document.getElementById("showLocationBtn").style.backgroundColor = showMyLocation ? "#2ecc71" : "#16a085";

Â  Â  // ðŸŸ¢ SYNCHRONIZATION FIX: Clear interval to stop premature fetching
Â  Â  clearInterval(alertIntervalId);
Â  Â  
Â  Â  if (showMyLocation) {
Â  Â  Â  Â  // ðŸŸ¢ ON: Send full update with showLocation: true
Â  Â  Â  Â  sendLocationUpdate(); 
Â  Â  Â  Â  addOrUpdatePersistentNotification("shareLocationNotif", "Your location is being shared.", "green");
Â  Â  } else {
Â  Â  Â  Â  // ðŸ”´ OFF: Tell the server to explicitly stop sharing
Â  Â  Â  Â  removeSharedLocation(); 
Â  Â  Â  Â  removePersistentNotification("shareLocationNotif");
Â  Â  }
Â  Â  
Â  Â  // Re-start the interval immediately with a fast check (500ms) to clean up stale dots
Â  Â  alertIntervalId = setInterval(fetchAlerts, 500);
Â  Â  
Â  Â  // Set a timeout to switch back to the slower 3000ms poll rate after the cleanup check runs
Â  Â  setTimeout(() => {
Â  Â  Â  Â  clearInterval(alertIntervalId);
Â  Â  Â  Â  alertIntervalId = setInterval(fetchAlerts, 3000);
Â  Â  }, 500);

Â  Â  updateUserMarker();
});

// ----------------------------------------------------------------
// Module 5: Side Menu Button Handlers (New/Updated)
// ----------------------------------------------------------------

// Helper function to show a custom informational message (since alert() is forbidden)
function showInfoModal(title, message, isEmergency = false) {
Â  Â  const modal = document.createElement('div');
Â  Â  modal.className = 'popup-overlay';
Â  Â  modal.style.display = 'flex'; // Show modal

Â  Â  modal.innerHTML = `
Â  Â  Â  Â  <div class="popup-content" style="${isEmergency ? 'border: 3px solid #e74c3c;' : ''}">
Â  Â  Â  Â  Â  Â  <h2 style="color: ${isEmergency ? '#e74c3c' : '#1abc9c'};">${title}</h2>
Â  Â  Â  Â  Â  Â  <p>${message}</p>
Â  Â  Â  Â  Â  Â  <button onclick="this.parentNode.parentNode.remove()">Close</button>
Â  Â  Â  Â  </div>
Â  Â  `;
Â  Â  document.body.appendChild(modal);
}

// Account Button Handler (Redirects to account.html via Flask route)
document.getElementById('accountBtn').addEventListener('click', () => {
Â  Â  // ðŸŸ¢ FIX: Trigger Flask route directly for a full page load
Â  Â  window.location.href = '/account'; 
});

// About Button Handler (Redirects to about.html via Flask route)
document.getElementById('aboutBtn').addEventListener('click', () => {
Â  Â  // ðŸŸ¢ FIX: Trigger Flask route directly for a full page load
Â  Â  window.location.href = '/about';
});

// Police Button Handler (Emergency Contact/Info)
document.getElementById('policeBtn').addEventListener('click', () => {
Â  Â  showInfoModal(
Â  Â  Â  Â  'EMERGENCY: Contact Police', 
Â  Â  Â  Â  'Call 100 for immediate police assistance in India. Use the Help Me button for peer assistance.',
Â  Â  Â  Â  true
Â  Â  );
});

// Hospital Button Handler (Emergency Contact/Info)
document.getElementById('hospitalBtn').addEventListener('click', () => {
Â  Â  showInfoModal(
Â  Â  Â  Â  'EMERGENCY: Find Medical Help', 
Â  Â  Â  Â  'Call 108 for Ambulance/Medical Emergency services in India. Stay safe!',
Â  Â  Â  Â  true
Â  Â  );
});

// --- NEW LOGOUT LOGIC ADDED HERE ---
// Logout Button Handler
document.getElementById('logoutBtn')?.addEventListener('click', async () => {
    try {
        // Stop the location polling interval immediately
        if (alertIntervalId) {
            clearInterval(alertIntervalId);
        }

        // Send a POST request to the backend's /logout route
        const response = await fetch('/logout', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        });

        // Check for a successful response (or just assume success if the backend is redirecting)
        if (response.ok) {
            // Redirect the user to the login page or home page
            window.location.href = '/'; 
        } else {
            // Display an error message if the logout request failed on the server
            alert('Logout failed. Please try again.');
            console.error('Server error during logout:', response.status, response.statusText);
        }
    } catch (error) {
        // Handle network errors (e.g., server is unreachable)
        alert('A network error occurred. Could not complete logout.');
        console.error('Network error during logout:', error);
    }
});
// ------------------------------------

// ----------------------------------------------------------------
// End Module 5
// ----------------------------------------------------------------

setInterval(updateHelperDistances, 3000);

document.addEventListener("DOMContentLoaded", initMap);